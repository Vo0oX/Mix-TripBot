process.env.NTBA_FIX_319 = 1;
const express = require('express');
const bodyParser = require("body-parser");
const sha1 = require('sha1');
const TelegramBot = require('node-telegram-bot-api');
const microstats = require('microstats');
require('dotenv').config({path: __dirname + '/.env'});
const config = require('./src/html_template');
const helper = require('./src/helper');
const keyboard = require('./src/keyboard');
const kb = require('./src/keyboard_buttons');
const userScheme = require('./models/user.model');
const CloudIpsp = require('cloudipsp-node-js-sdk');
const toursScheme = require('./models/tours.model');
const eventScheme = require('./models/events.model');
const businessCampScheme = require('./models/businessCamp.model');



const app = express();
const urlencodedParser = bodyParser.urlencoded({extended: false});
app.use(bodyParser.json());

const bot = new TelegramBot(process.env.BOT_TOKEN, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

let newSentence = {};
newSentence.date = [];
let newTour = {};


app.post("/callback",urlencodedParser, function(request, response){
    response.sendStatus(200);



    let servSign = request.body.signature;
    let peyStatus = request.body.order_status;

    let myObj = request.body;
    delete myObj.signature;

    let keys = [],
        k, i, len;

    let nLen = [process.env.Fondy_secretKey];

    for (k in myObj) {
        if (myObj.hasOwnProperty(k)) {
            keys.push(k);
        }
    }

    keys.sort();

    len = keys.length;

    for (i = 0; i < len; i++) {
        k = keys[i];

        if (myObj[k].length !== 0) {

            nLen.push(`|`+myObj[k]);
        }

    }
    let lestLen = nLen.join('');


    let signature = sha1(lestLen);

    let client_id = JSON.parse(request.body.merchant_data);

    let chatID = client_id[0].chat_id;



    if (servSign === signature && peyStatus === 'approved') {

        helper.userCheck(chatID, function (row) {

            let fin_blanc = (row[0].balance + (row[0].add_funds));


            helper.add_funds(chatID, fin_blanc, function (row) {

            });


            let order = {
                'sum': row[0].add_funds
            };
            helper.addFundsHist(chatID, order);


            bot.sendMessage(`${chatID}`, config.HTML_add_funds_notif + `${fin_blanc} —Ä—É–±`, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    keyboard: keyboard.homepage,
                    resize_keyboard: true
                }

            }).then(setTimeout(() => {
                bot.sendMessage(chatID, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                    reply_markup: {
                        inline_keyboard: kb.homepage
                    }
                })
            }, 700));

            bot.sendMessage(process.env.Admin_ID, `<code>‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
üí∞ ${row[0].add_funds} —Ä—É–±
üë§ <b>${chatID}</b>
                </code>`,{
                parse_mode: 'HTML',
                disable_web_page_preview: true,
            });
            bot.sendMessage(process.env.Dev_ID, `<code>‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
üí∞ ${row[0].add_funds} —Ä—É–±
üë§ <b>${chatID}</b>
                </code>`,{
                parse_mode: 'HTML',
                disable_web_page_preview: true,
            });

        });

    }
    else if (servSign === signature && peyStatus === 'created') {

        console.log(' created ‚Äî –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –Ω–µ –≤–≤–µ–ª –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã; –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n');


    }
    else if (servSign === signature && peyStatus === 'processing') {

        console.log(' processing ‚Äî –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º; –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n');


    }
    else if (servSign === signature && peyStatus === 'declined') {

        console.log(' declined ‚Äî –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º FONDY, –≤–Ω–µ—à–Ω–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –±–∞–Ω–∫–æ–º-—ç–∫–≤–∞–π–µ—Ä–æ–º\n');


    }
    else if (servSign === signature && peyStatus === 'expired') {

        console.log(' expired ‚Äî –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–∫–∞–∑–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ lifetime, –∏—Å—Ç–µ–∫–ª–æ.\n');


    }
    else if (servSign === signature && peyStatus === 'reversed') {

        console.log(' reversed ‚Äî —Ä–∞–Ω–µ–µ —É—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–µ–Ω–∞. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø–∞—Ä–∞–º–µ—Ç—Ä reversal_amount –±—É–¥–µ—Ç —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ actual_amount\n');


    }
    else {
        bot.sendMessage(chatID, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§î `, {
            parse_mode: 'HTML',
            reply_markup: {
                resize_keyboard: true
            }

        })
    }


});


let allArr;


bot.on('message', msg => {


    let step;

    helper.userCheck(helper.getChatId(msg), function (row) {


        if (msg.text === kb.general.home_menu) {

            allArr = {};

            bot.sendMessage(helper.getChatId(msg), '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                reply_markup: {inline_keyboard: kb.homepage}
            });

            helper.resetUserInfo(helper.getChatId(msg), function (row) {});
            // helper.interestedTourTmpClear(helper.getChatId(msg))

            step = 'v2';
            helper.switchState(helper.getChatId(msg), step);

        }
        else if (msg.text === '/start') {
            step = 'v2';
            helper.switchState(helper.getChatId(msg), step);
        }
        else {

            if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å –¢—É—Ä' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–î–æ–±–∞–≤–∏—Ç—å –¢—É—Ä' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞ –∏ —Ñ–ª–∞–≥ ' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: üá¨üá™ –ì—Ä—É–∑–∏—è');

                helper.switchState(helper.getChatId(msg), 'infoTours');

            }

            else if (msg.text === '–£–¥–∞–ª–∏—Ç—å –¢—É—Ä' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–£–¥–∞–ª–∏—Ç—å –¢—É—Ä' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                helper.loadButton(function (row) {


                    let newRow = row;

                    newRow.push([
                        {
                            text: 'üõíAdmin',
                            callback_data: 'üõíAdmin'
                        }
                    ]);


                    bot.sendMessage(helper.getChatId(msg), '–ö–∞–∫–æ–π —Ç—É—Ä –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: newRow,
                            resize_keyboard: true
                        }

                    })
                    helper.switchState(helper.getChatId(msg), 'deleteToure');

                });





            }

            else if (msg.text === '–£–¥–∞–ª–∏—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–£–¥–∞–ª–∏—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                eventScheme.find({}, function (err, rows) {


                    let btnRow = [
                        [{
                            text: 'üõíAdmin',
                            callback_data: 'üõíAdmin'
                        }]
                    ];


                    for (let i = 0; i < rows.length; i++) {

                        btnRow.unshift([
                            {
                                text: rows[i].eventShortBtn,
                                callback_data: rows[i].eventShortBtn
                            }
                        ]);



                    }

                    bot.sendMessage(helper.getChatId(msg), '–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: btnRow,
                            resize_keyboard: true
                        }

                    })
                    helper.switchState(helper.getChatId(msg), 'deleteEvents');



                })






            }

            else if (msg.text === '–£–¥–∞–ª–∏—Ç—å Business Camp' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–£–¥–∞–ª–∏—Ç—å Business Camp' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                businessCampScheme.find({}, function (err, rows) {


                    let btnRows = [
                        [{
                            text: 'üõíAdmin',
                            callback_data: 'üõíAdmin'
                        }]
                    ];


                    for (let i = 0; i < rows.length; i++) {

                        btnRows.unshift([
                            {
                                text: rows[i].businessCampShortBtn,
                                callback_data: rows[i].businessCampShortBtn
                            }
                        ]);



                    }

                    bot.sendMessage(helper.getChatId(msg), '–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: btnRows,
                            resize_keyboard: true
                        }

                    })
                    helper.switchState(helper.getChatId(msg), 'deleteBusinessCamp');



                })






            }

            else if (row[0].step === 'shareSocial') {


                eventScheme.find({info:row[0].task}, function (err, rows) {

                }).then(
                    helper.eventUsrUp(helper.getChatId(msg),msg.text, function () {
                        bot.sendMessage(helper.getChatId(msg), 'üöÄ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.', {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                inline_keyboard: kb.homepage,
                                resize_keyboard: true
                            }

                        })
                        bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${msg.text}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: 
        ${row[0].task}

                       
                        
                        `,{
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });
                        bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${msg.text}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: 
        ${row[0].task}
                       
                        
                        `,{
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });
                    })

                )

            }

            else if (row[0].step === 'shareSocialB') {


                businessCampScheme.find({info:row[0].task}, function (err, rows) {

                }).then(
                    helper.eventUsrUp(helper.getChatId(msg),msg.text, function () {
                        bot.sendMessage(helper.getChatId(msg), 'üöÄ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.', {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                inline_keyboard: kb.homepage,
                                resize_keyboard: true
                            }

                        })
                        bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${msg.text}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª Business Camp: 
        ${row[0].task}

                       
                        
                        `,{
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });
                        bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${msg.text}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª Business Camp: 
        ${row[0].task}
                       
                        
                        `,{
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });
                    })

                )

            }

            else if (row[0].step === 'deleteEvents') {




                bot.sendMessage(helper.getChatId(msg), "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üôå", {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: keyboard.admin,
                        resize_keyboard: true
                    }

                })

                eventScheme.deleteOne({eventShortBtn: msg.text}, function (err) {

                    if (!err) {
                        console.log('ok')
                    }
                    else {
                        console.log('err')
                    }


                });


                helper.switchState(helper.getChatId(msg), 'v6');


            }

            else if (row[0].step === 'deleteBusinessCamp') {




                bot.sendMessage(helper.getChatId(msg), "Business Camp —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üôå", {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: keyboard.admin,
                        resize_keyboard: true
                    }

                })

                businessCampScheme.deleteOne({businessCampShortBtn: msg.text}, function (err) {

                    if (!err) {
                        console.log('ok')
                    }
                    else {
                        console.log('err')
                    }


                });


                helper.switchState(helper.getChatId(msg), 'v6');


            }

            else if (row[0].step === 'deleteToure') {




                bot.sendMessage(helper.getChatId(msg), "–¢—É—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üôå", {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: keyboard.admin,
                        resize_keyboard: true
                    }

                })
                toursScheme.deleteOne({name: msg.text}, function (err) {

                    if (!err) {
                        console.log('ok')
                    }
                    else {
                        console.log('err')
                    }


                });


                helper.switchState(helper.getChatId(msg), 'v6');


            }


            else if (row[0].step === 'enterInfoTour') {

                helper.arrTour(row[0].id, undefined, undefined, undefined, undefined, msg.text, undefined, undefined, undefined, undefined,function () {


                    bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?' +
                        '\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2 ', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'enterInfoTour_people');

                })



            }

            else if (row[0].step === 'enterInfoTour_people') {

                helper.arrTour(row[0].id, undefined, undefined, undefined, undefined, undefined, msg.text, undefined, undefined, undefined,function () {


                    bot.sendMessage(helper.getChatId(msg), '3Ô∏è‚É£ E—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫, —Ç–æ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç?' +
                        '\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞–ª—å—á–∏–∫ 12" –∏–ª–∏ "–î–µ–≤–æ—á–∫–∞ 8"', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            resize_keyboard: true
                        }

                    });

                    helper.switchState(helper.getChatId(msg), 'enterInfoTour_children');
                })



            }

            else if (row[0].step === 'enterInfoTour_children') {

                helper.arrTour(row[0].id, undefined, undefined, undefined, undefined, undefined, undefined, msg.text, undefined, undefined,function () {

                    bot.sendMessage(helper.getChatId(msg), '4Ô∏è‚É£ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?' +
                        '\n–ù–∞–ø—Ä–∏–º–µ—Ä: "10 –¥–Ω–µ–π" –∏–ª–∏ "5-7 –¥–Ω–µ–π"', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            resize_keyboard: true
                        }

                    });

                    helper.switchState(helper.getChatId(msg), 'enterInfoTour_finder');
                })



            }

            else if (row[0].step === 'enterInfoTour_finder') {

                helper.arrTour(row[0].id, undefined, undefined, undefined, undefined, undefined, undefined, undefined, msg.text, undefined,function () {


                    if (row[0].phone === null) {
                        let options = {
                            "parse_mode": "Markdown",
                            "reply_markup": JSON.stringify({
                                "keyboard": [
                                    [{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact: true }]
                                ],
                                "one_time_keyboard" : true
                            })
                        };
                        bot.sendMessage(helper.getChatId(msg), "‚ùóÔ∏èÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–±–µ—Ä–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏", options);



                        helper.switchState(row[0].id, 'v12');

                    }
                    else {
                        bot.sendMessage(helper.getChatId(msg), `‚ùóÔ∏è–í–∞—à–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: \n${row[0].presentation}`, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                keyboard: keyboard.homepage,
                                resize_keyboard: true
                            }

                        }).then(setTimeout(() => {
                            bot.sendMessage(helper.getChatId(msg), '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                                reply_markup: {
                                    inline_keyboard: kb.homepage
                                }
                            })
                        }, 700))

                        bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–ù–æ–º–µ—Ä: <code><strong>${row[0].phone}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –¢—É—Ä: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
    –ö–æ–ª-–≤–æ –ª—é–¥–µ–π: ${row[0].people}
    –î–µ—Ç–∏: ${row[0].children}
    –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –¥–Ω–µ–π: ${msg.text}
    

                       
                        
                        `,{
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });

                        bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–ù–æ–º–µ—Ä: <code><strong>${row[0].phone}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –¢—É—Ä: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
    –ö–æ–ª-–≤–æ –ª—é–¥–µ–π: ${row[0].people}
    –î–µ—Ç–∏: ${row[0].children}
    –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –¥–Ω–µ–π: ${msg.text}   
    
 
                        `,{
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });


                        // helper.interestedTourTmp(row[0].id, selectedTourArr, function () {
                        //     selectedTourArr = {};
                        // })



                    }


                })


            }

            else if (row[0].step === 'infoTours') {


                String.prototype.translit = String.prototype.translit || function () {
                    let Chars = {
                            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya', '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO', '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'C', '–ß': 'CH', '–®': 'SH', '–©': 'SHCH', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA'
                        },
                        t = this;
                    for (let i in Chars) { t = t.replace(new RegExp(i, 'g'), Chars[i]); }
                    return t;
                };

                let btn_name = msg.text.translit().replace(/[^a-zA-Z–ê-–Ø–∞-—è]/g, '');

                newTour.name = msg.text;
                newTour.btn_name = btn_name;


                bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¢—É—Ä–æ–≤. \n–ù–∞–ø—Ä–∏–º–µ—Ä:' +
                    `<i>
    <code><strong>–û—Ç–ª–∏—á–∏–µ —Ç—É—Ä–æ–≤:</strong>ü§ñ</code> 
    <pre>
    –í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
    </pre>
    
<code>1Ô∏è‚É£<u> –° –ø–æ–º–æ—â—å—é –º–µ–Ω—é –≤—ã–±–∏—Ä–∞–µ—à—å - ¬´üõí<strong>–¢—É—Ä—ã</strong>¬ª.</u></code>
<code>2Ô∏è‚É£<u> –í—ã–±–∏—Ä–∞–µ—à—å.</u></code>
</i>`);




                helper.switchState(helper.getChatId(msg), 'doneTour');


            }

            else if (row[0].step === 'doneTour') {


                newTour.infoTours = msg.text;


                bot.sendMessage(helper.getChatId(msg), 'üôå –¢—É—Ä –¥–æ–±–∞–≤–ª–µ–Ω');


                helper.addTour(newTour,function () {
                    newTour = {};
                })

                helper.switchState(helper.getChatId(msg), 'v6');


            }



            else if (msg.text === '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢—É—Ä' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢—É—Ä' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                newSentence.date = [];

                helper.loadButton(function (row) {


                    let newRow = row;

                    newRow.push([
                        {
                            text: 'üõíAdmin',
                            callback_data: 'üõíAdmin'
                        }
                    ]);


                    bot.sendMessage(helper.getChatId(msg), '–ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: newRow,
                            resize_keyboard: true
                        }

                    })
                    helper.switchState(helper.getChatId(msg), 'editTour');

                });




            }

            else if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–î–æ–±–∞–≤–∏—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' && helper.getChatId(msg).toString() === process.env.Dev_ID) {



                bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. \n–ù–∞–ø—Ä–∏–º–µ—Ä:' +
                    `<i>
    <code><strong>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ç–∞–∫–æ–µ-—Ç–æ</strong>ü§ñ</code> 
    <pre>
        –ë—É–¥–µ—Ç —Ç–æ –∏ —Ç–æ
    </pre>
    
<code>1Ô∏è‚É£<u> –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—Éüõí<strong> –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ </strong>¬ª.</u></code>

</i>`);




                helper.switchState(helper.getChatId(msg), 'eventsCreate');

            }

            else if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å Business Camp' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === '–î–æ–±–∞–≤–∏—Ç—å Business Camp' && helper.getChatId(msg).toString() === process.env.Dev_ID) {



                bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ Business Camp. \n–ù–∞–ø—Ä–∏–º–µ—Ä:' +
                    `<i>
    <code><strong>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ç–∞–∫–æ–µ-—Ç–æ</strong>ü§ñ</code> 
    <pre>
        –ë—É–¥–µ—Ç —Ç–æ –∏ —Ç–æ
    </pre>
    
<code>1Ô∏è‚É£<u> –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—Éüõí<strong> –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å Business Camp </strong>¬ª.</u></code>

</i>`);




                helper.switchState(helper.getChatId(msg), 'businessCampCreate');

            }

            else if (row[0].step === 'businessCampCreate') {

                allArr = {
                    info: msg.text
                };


                bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ö–†–û–¢–ö–£–Æ –ö–ù–û–ü–ö–£ \n‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–æ—Ä–æ—Ç–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. \n–ù–∞–ø—Ä–∏–º–µ—Ä: "businessCamp1" –∏–ª–∏ "camp1"');




                helper.switchState(helper.getChatId(msg), 'businessCampCreateDone');
            }

            else if (row[0].step === 'businessCampCreateDone') {


                allArr.businessCampShortBtn = msg.text;



                bot.sendMessage(helper.getChatId(msg), 'üôå Business Camp –¥–æ–±–∞–≤–ª–µ–Ω');


                helper.businessCampCreateS(allArr,function () {
                    allArr = {};
                })

                helper.switchState(helper.getChatId(msg), 'v6');
            }

            else if (row[0].step === 'eventsCreate') {

                allArr = {
                    info: msg.text
                };


                bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ö–†–û–¢–ö–£–Æ –ö–ù–û–ü–ö–£ \n‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–æ—Ä–æ—Ç–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. \n–ù–∞–ø—Ä–∏–º–µ—Ä: "event1Name" –∏–ª–∏ "eventCamp1202"');




                helper.switchState(helper.getChatId(msg), 'eventsCreateDone');
            }

            else if (row[0].step === 'eventsCreateDone') {


                allArr.eventShortBtn = msg.text;



                bot.sendMessage(helper.getChatId(msg), 'üôå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');


                helper.eventsCreate(allArr,function () {
                    allArr = {};
                })

                helper.switchState(helper.getChatId(msg), 'v6');
            }

            else if (row[0].step === 'editTour') {

                if (msg.text === 'üõíAdmin') {

                    allArr = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });


                }
                else {
                    toursScheme.find({name: msg.text}, function (err, rows) {


                        if (err) {
                            console.log(err)
                        } else {


                            if (rows.length === 0) {

                            } else {


                                bot.sendMessage(helper.getChatId(msg), '–ß—Ç–æ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å?', {
                                    parse_mode: 'HTML',
                                    disable_web_page_preview: true,
                                    reply_markup: {
                                        keyboard: kb.add_tours,
                                        resize_keyboard: true
                                    }

                                })

                                helper.switchState(helper.getChatId(msg), 'editTourCountry', rows[0]._id);
                                //helper.switchState(helper.getChatId(msg), 'editTourCountry', rows[0]._id);


                            }

                        }


                    });

                }

            }

            else if (row[0].step === 'editTourCountry') {


                if (msg.text === 'üõíAdmin') {

                    allArr = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });


                }
                else if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å –ì–∞–π–¥') {

                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –ì–∞–π–¥,' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: https://telegra.ph/Kak-dobavit-zadanie-v-bot-02-01', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'add_guide');



                }
                else if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å –≠–∫—Å–ø–µ–¥–∏—Ü–∏—é' ) {


                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' +
                        '‚òÅÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ä–æ–∫–∫–æ –õ—é–∫—Å 1350 –µ–≤—Ä–æ', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [[
                                {
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }
                            ]],
                            resize_keyboard: true
                        }

                    })
                    helper.switchState(helper.getChatId(msg), 'sentence');

                }
                else if (msg.text === '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≠–∫—Å–ø–µ–¥–∏—Ü–∏—é' ) {


                    helper.userCheck(helper.getChatId(msg), function (row) {


                        toursScheme.find({_id:row[0].stepEditor}, function (err, rows) {

                            if (err)
                                console.log(err)
                            else {
                                if (rows[0].sentence.length === 0) {

                                    bot.sendMessage(helper.getChatId(msg), '–≠–∫—Å–ø–µ–¥–∏—Ü–∏–π –Ω–µ—Ç—É!', {
                                        parse_mode: 'HTML',
                                        disable_web_page_preview: true,
                                        reply_markup: {
                                            keyboard: kb.add_tours,
                                            resize_keyboard: true
                                        }

                                    })

                                    helper.switchState(helper.getChatId(msg), 'editTourCountry', rows[0]._id);
                                    //helper.switchState(helper.getChatId(msg), 'editTourCountry', rows[0]._id);


                                } else {

                                    let kbForCountryEditExp = [
                                        [{
                                            text: 'üõíAdmin',
                                            callback_data: 'üõíAdmin'
                                        }]
                                    ];


                                    for (let i = 0; i < rows[0].sentence.length; i++) {



                                        kbForCountryEditExp.unshift(
                                            [{
                                                text: rows[0].sentence[i].name,
                                                callback_data: rows[0].sentence[i].name,
                                            }]
                                        );



                                    }
                                    bot.sendMessage(helper.getChatId(msg), '–ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', {
                                        parse_mode: 'HTML',
                                        disable_web_page_preview: true,
                                        reply_markup: {
                                            keyboard: kbForCountryEditExp,
                                            resize_keyboard: true
                                        }

                                    })
                                    helper.switchState(helper.getChatId(msg), 'adminEditCountry');

                                }

                            }
                        })

                    });

                }
                else if (msg.text === '–£–¥–∞–ª–∏—Ç—å –≠–∫—Å–ø–µ–¥–∏—Ü–∏—é' ) {


                    helper.userCheck(helper.getChatId(msg), function (row) {


                        toursScheme.find({_id:row[0].stepEditor}, function (err, rows) {

                            if (err)
                                console.log(err)
                            else {
                                if (rows[0].sentence.length === 0) {

                                    bot.sendMessage(helper.getChatId(msg), '–≠–∫—Å–ø–µ–¥–∏—Ü–∏–π –Ω–µ—Ç—É!', {
                                        parse_mode: 'HTML',
                                        disable_web_page_preview: true,
                                        reply_markup: {
                                            keyboard: kb.add_tours,
                                            resize_keyboard: true
                                        }

                                    })

                                    helper.switchState(helper.getChatId(msg), 'editTourCountry', rows[0]._id);
                                    //helper.switchState(helper.getChatId(msg), 'editTourCountry', rows[0]._id);


                                }
                                else {

                                    let kbForCountryEditExp = [
                                        [{
                                            text: 'üõíAdmin',
                                            callback_data: 'üõíAdmin'
                                        }]
                                    ];


                                    for (let i = 0; i < rows[0].sentence.length; i++) {



                                        kbForCountryEditExp.unshift(
                                            [{
                                                text: rows[0].sentence[i].name,
                                                callback_data: rows[0].sentence[i].name,
                                            }]
                                        );



                                    }
                                    bot.sendMessage(helper.getChatId(msg), '–ß—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?', {
                                        parse_mode: 'HTML',
                                        disable_web_page_preview: true,
                                        reply_markup: {
                                            keyboard: kbForCountryEditExp,
                                            resize_keyboard: true
                                        }

                                    })
                                    helper.switchState(helper.getChatId(msg), 'adminEditCountryExpedition');

                                }

                            }
                        })

                    });

                }
                else if (msg.text === '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ –¢—É—Ä–æ–≤' ) {


                    bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¢—É—Ä–æ–≤. \n–ù–∞–ø—Ä–∏–º–µ—Ä:' +
                        `<i>
    <code><strong>–û—Ç–ª–∏—á–∏–µ —Ç—É—Ä–æ–≤:</strong>ü§ñ</code> 
    <pre>
    –í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
    </pre>
    
<code>1Ô∏è‚É£<u> –° –ø–æ–º–æ—â—å—é –º–µ–Ω—é –≤—ã–±–∏—Ä–∞–µ—à—å - ¬´üõí<strong>–¢—É—Ä—ã</strong>¬ª.</u></code>
<code>2Ô∏è‚É£<u> –í—ã–±–∏—Ä–∞–µ—à—å.</u></code>
</i>`, {
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [[
                                {
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }
                            ]],
                            resize_keyboard: true
                        }

                    });




                    helper.switchState(helper.getChatId(msg), 'adminEditInfoToursTT');
                }

            }

            else if (row[0].step === 'adminEditCountry') {
                helper.userCheck(helper.getChatId(msg), function () {


                    if (msg.text === 'üõíAdmin') {
                        allArr = {};
                        newSentence = {};

                        helper.switchState(helper.getChatId(msg), 'v99');

                        helper.resetUserInfo(helper.getChatId(msg), function () {

                            bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                                parse_mode: 'HTML',
                                disable_web_page_preview: true,
                                reply_markup: {
                                    keyboard: keyboard.admin,
                                    resize_keyboard: true
                                }

                            })
                        });
                    }
                    else {
                        console.log('—Ç—É—Ç');

                        helper.sentenseCheck(msg.text , function (list) {
                            allArr = list;

                            bot.sendMessage(helper.getChatId(msg), '–ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', {
                                parse_mode: 'HTML',
                                disable_web_page_preview: true,
                                reply_markup: {
                                    keyboard: [
                                        [{
                                            text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                            callback_data: 'countryEditNameT'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                            callback_data: 'countryEditInfoT'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                            callback_data: 'countryEditPresenT'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                            callback_data: 'countryEditDate'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                            callback_data: 'countryEditPreOrder'
                                        }],
                                        [{
                                            text: 'üõíAdmin',
                                            callback_data: 'üõíAdmin'
                                        }]
                                    ],
                                    resize_keyboard: true
                                }

                            })
                            helper.switchState(helper.getChatId(msg), 'editorAllCountryAdT');
                        })



                    }


                });

            }

            else if (row[0].step === 'adminDeleteCountry') {
                helper.userCheck(helper.getChatId(msg), function () {


                    if (msg.text === 'üõíAdmin') {
                        allArr = {};
                        newSentence = {};

                        helper.switchState(helper.getChatId(msg), 'v99');

                        helper.resetUserInfo(helper.getChatId(msg), function () {

                            bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                                parse_mode: 'HTML',
                                disable_web_page_preview: true,
                                reply_markup: {
                                    keyboard: keyboard.admin,
                                    resize_keyboard: true
                                }

                            })
                        });
                    } else {
                        console.log('—Ç—Ä–µ—Ç–∏–π —Ä–µ–¥–∞–∫—Ç');
                        helper.sentenseCheck(msg.text , function (list) {
                            allArr = list;

                            bot.sendMessage(helper.getChatId(msg), '–ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', {
                                parse_mode: 'HTML',
                                disable_web_page_preview: true,
                                reply_markup: {
                                    keyboard: [
                                        [{
                                            text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                            callback_data: 'countryEditNameT'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                            callback_data: 'countryEditInfoT'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                            callback_data: 'countryEditPresenT'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                            callback_data: 'countryEditDate'
                                        }],
                                        [{
                                            text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                            callback_data: 'countryEditPreOrder'
                                        }],
                                        [{
                                            text: 'üõíAdmin',
                                            callback_data: 'üõíAdmin'
                                        }]
                                    ],
                                    resize_keyboard: true
                                }

                            })
                            helper.switchState(helper.getChatId(msg), 'editorAllCountryAdT');
                        })

                    }


                });



            }

            else if (row[0].step === 'adminEditInfoToursTT') {

                if (msg.text === 'üõíAdmin') {


                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });


                }
                else {
                    bot.sendMessage(helper.getChatId(msg), '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: keyboard.admin,
                            resize_keyboard: true
                        }

                    });


                    toursScheme.updateMany({_id: row[0].stepEditor}, {
                        $set: {
                            infoTours: msg.text
                        }
                    }, {upsert: false}, function (err) {
                        if (err) {
                            console.log(err);
                        } else {
                            console.log('OK');
                        }
                    });

                    helper.switchState(helper.getChatId(msg), 'v8n72');
                }




            }

            else if (row[0].step === 'editorAllCountryAdT') {
                if (msg.text === 'üõíAdmin') {
                    allArr = {};
                    newSentence = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });
                }
                else if (msg.text === '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' ) {


                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' +
                        '‚òÅÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ä–æ–∫–∫–æ –õ—é–∫—Å 1350 –µ–≤—Ä–æ', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [[
                                {
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }
                            ]],
                            resize_keyboard: true
                        }

                    })

                    helper.switchState(helper.getChatId(msg), 'countryEditNameTT');

                }
                else if (msg.text === '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ') {
                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞,' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: "–≠—Ç–æ –ê–≤—Ç–æ—Ä—Å–∫–∏–π —Ç—É—Ä —Ç–æ—Å–∏-–±–æ—Å–∏" ', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });
                    helper.switchState(helper.getChatId(msg), 'countryEditInfoTT');

                }
                else if (msg.text === '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é') {
                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é,' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: https://telegra.ph/Kak-dobavit-zadanie-v-bot-02-01', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });
                    helper.switchState(helper.getChatId(msg), 'countryEditPresenTT');

                }
                else if (msg.text === '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã') {
                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –¥–∞—Ç—É', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });
                    helper.switchState(helper.getChatId(msg), 'countryEditDateTT');
                }
                else if (msg.text === '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É') {
                    bot.sendMessage(helper.getChatId(msg), '1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö,' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: "25000"', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });
                    helper.switchState(helper.getChatId(msg), 'countryEditPreOrderTT');
                }




            }

            else if (row[0].step === 'countryEditNameTT') {

                if (msg.text === 'üõíAdmin') {
                    allArr = {};
                    newSentence = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });
                }
                else {
                    toursScheme.updateMany({'sentence.name': allArr.sentence[0].name}, {'$set': {
                            'sentence.$.name': msg.text
                        }}, function() {

                        allArr.sentence[0].name = msg.text

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                        callback_data: 'countryEditNameT'
                                    }],
                                    [{
                                        text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                        callback_data: 'countryEditInfoT'
                                    }],
                                    [{
                                        text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                        callback_data: 'countryEditPresenT'
                                    }],
                                    [{
                                        text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                        callback_data: 'countryEditDate'
                                    }],
                                    [{
                                        text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                        callback_data: 'countryEditPreOrder'
                                    }],
                                    [{
                                        text: 'üõíAdmin',
                                        callback_data: 'üõíAdmin'
                                    }]
                                ],
                                resize_keyboard: true
                            }

                        });


                        helper.switchState(helper.getChatId(msg), 'editorAllCountryAdT');

                    });
                }

            }

            else if (row[0].step === 'countryEditPresenTT') {


                console.log(9999);
                console.log(allArr);
                console.log(allArr.sentence[0].name);

                if (msg.text === 'üõíAdmin') {
                    allArr = {};
                    newSentence = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });
                }
                else {
                    toursScheme.updateMany({'sentence.name': allArr.sentence[0].name || 'what'}, {'$set': {
                            'sentence.$.sentence': msg.text
                        }}, function(err) {

                        if (err) {
                            console.log (err, 'row[0].step === countryEditPresenTT');
                        }
                        else {
                            console.log('–±–µ–∑ –æ—à–∏–±–æ–∫');
                            allArr.sentence[0].sentence = msg.text
                        }

                    });

                    bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                    callback_data: 'countryEditNameT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                    callback_data: 'countryEditInfoT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                    callback_data: 'countryEditPresenT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                    callback_data: 'countryEditDate'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                    callback_data: 'countryEditPreOrder'
                                }],
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'editorAllCountryAdT');
                }





            }

            else if (row[0].step === 'countryEditInfoTT') {


                toursScheme.updateMany({'sentence.name': allArr.sentence[0].name}, {'$set': {
                        'sentence.$.typeTourInfo': msg.text
                    }}, function() {

                    allArr.sentence[0].typeTourInfo = msg.text
                });

                bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: [
                            [{
                                text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                callback_data: 'countryEditNameT'
                            }],
                            [{
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                callback_data: 'countryEditInfoT'
                            }],
                            [{
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                callback_data: 'countryEditPresenT'
                            }],
                            [{
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                callback_data: 'countryEditDate'
                            }],
                            [{
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                callback_data: 'countryEditPreOrder'
                            }],
                            [{
                                text: 'üõíAdmin',
                                callback_data: 'üõíAdmin'
                            }]
                        ],
                        resize_keyboard: true
                    }

                });


                helper.switchState(helper.getChatId(msg), 'editorAllCountryAdT');



            }

            else if (row[0].step === 'countryEditDateTT') {


                if (msg.text === 'üõíAdmin') {

                }
                else {

                    const str = msg.text;
                    const re = str.split(" ");


                    toursScheme.updateMany({'sentence.name': allArr.sentence[0].name}, {'$set': {
                            'sentence.$.date': re
                        }}, function() {

                        allArr.sentence[0].date = re

                    });

                    bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                    callback_data: 'countryEditNameT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                    callback_data: 'countryEditInfoT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                    callback_data: 'countryEditPresenT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                    callback_data: 'countryEditDate'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                    callback_data: 'countryEditPreOrder'
                                }],
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'editorAllCountryAdT');



                }

            }

            else if (row[0].step === 'countryEditPreOrderTT') {


                if (msg.text === 'üõíAdmin') {
                    allArr = {};
                    newSentence = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });
                }
                else {



                    toursScheme.updateMany({'sentence.name': allArr.sentence[0].name}, {'$set': {
                            'sentence.$.preOrder': msg.text
                        }}, function() {

                        allArr.sentence[0].preOrder = msg.text

                    });

                    bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                    callback_data: 'countryEditNameT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                    callback_data: 'countryEditInfoT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                                    callback_data: 'countryEditPresenT'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã',
                                    callback_data: 'countryEditDate'
                                }],
                                [{
                                    text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É',
                                    callback_data: 'countryEditPreOrder'
                                }],
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'v2');



                }

            }



            else if (row[0].step === 'sentence') {

                //TODO: admin - —Å–±—Ä–æ—Å

                if (msg.text === 'üõíAdmin') {
                    allArr = {};
                    newSentence = {};

                    helper.switchState(helper.getChatId(msg), 'v99');

                    helper.resetUserInfo(helper.getChatId(msg), function () {

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                    });
                }
                else {
                    newSentence.name = msg.text;



                    bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –¢–∏–ø —Ç—É—Ä–∞,' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: "Package"  "Authors" ', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: 'Package'
                                }],
                                [{
                                    text: 'Authors',
                                }],
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'editTypeTourAddInfo');
                }




            }

            else if (row[0].step === 'editTypeTourAddInfo') {

                newSentence.typeTour = msg.text;



                bot.sendMessage(helper.getChatId(msg), '3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞,' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: "–≠—Ç–æ –ê–≤—Ç–æ—Ä—Å–∫–∏–π —Ç—É—Ä —Ç–æ—Å–∏-–±–æ—Å–∏" ', {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: [
                            [{
                                text: 'üõíAdmin',
                                callback_data: 'üõíAdmin'
                            }]
                        ],
                        resize_keyboard: true
                    }

                });


                helper.switchState(helper.getChatId(msg), 'editTypeTour');



            }

            else if (row[0].step === 'editTypeTour') {

                newSentence.typeTourInfo = msg.text;



                bot.sendMessage(helper.getChatId(msg), '4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é,' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: https://telegra.ph/Kak-dobavit-zadanie-v-bot-02-01', {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: [
                            [{
                                text: 'üõíAdmin',
                                callback_data: 'üõíAdmin'
                            }]
                        ],
                        resize_keyboard: true
                    }

                });


                helper.switchState(helper.getChatId(msg), 'editExpeditionPreOrder');



            }

            else if (row[0].step === 'editExpeditionPreOrder') {

                newSentence.sentence = msg.text;

                if (newSentence.typeTour === 'Package') {
                    toursScheme.updateMany({_id: row[0].stepEditor}, {$push: {sentence: newSentence}}, {upsert: false}, function (err) {
                        if (err) {
                            console.log(err);
                        } else {
                            console.log('OK');
                        }

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                        helper.switchState(helper.getChatId(msg), 'v98', 'v99');

                        newSentence = {};
                        newSentence.date = [];

                    });


                    helper.switchState(helper.getChatId(msg), 'v4');
                }
                else if (newSentence.typeTour === 'Authors') {
                    bot.sendMessage(helper.getChatId(msg), '5Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö,' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: "25000"', {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: 'üõíAdmin',
                                    callback_data: 'üõíAdmin'
                                }]
                            ],
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'editExpedition');
                }





            }

            else if (row[0].step === 'editExpedition') {



                newSentence.preOrder = msg.text;

                //–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç—É—Ç


                bot.sendMessage(helper.getChatId(msg), '6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–∞' +
                    '\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12.02');

                helper.switchState(helper.getChatId(msg), 'dateTour');




            }

            else if (row[0].step === 'add_guide') {


                toursScheme.updateMany({_id: row[0].stepEditor}, {
                    $set: {
                        guide: msg.text
                    }
                }, {upsert: false}, function (err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('OK');
                    }

                    bot.sendMessage(helper.getChatId(msg), '2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–∞–π–¥–∞. \n–ù–∞–ø—Ä–∏–º–µ—Ä:' +
                        `<i>
    –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <code><strong>–¢–£–†</strong>ü§ñ</code> 
    <pre>
    –í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
    </pre>
    
<code>1Ô∏è‚É£<u> –° –ø–æ–º–æ—â—å—é –º–µ–Ω—é –≤—ã–±–∏—Ä–∞–µ—à—å - ¬´üõí<strong>–¢—É—Ä—ã</strong>¬ª.</u></code>
<code>2Ô∏è‚É£<u> –í—ã–±–∏—Ä–∞–µ—à—å.</u></code>
</i>`, {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'guideInfo');

                    newSentence = {};
                    newSentence.date = [];

                });






            }

            else if (row[0].step === 'guideInfo') {



                toursScheme.updateMany({_id: row[0].stepEditor}, {
                    $set: {
                        guideInfo: msg.text
                    }
                }, {upsert: false}, function (err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('OK');
                    }

                    bot.sendMessage(helper.getChatId(msg), '3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ü–µ–Ω—É –≥–∞–π–¥–∞ –≤ —Ä—É–±–ª—è—Ö.  \n–ù–∞–ø—Ä–∏–º–µ—Ä:' +
                        `<i>
                                <code><u>4000</u></code>
                        </i>`, {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            resize_keyboard: true
                        }

                    });


                    helper.switchState(helper.getChatId(msg), 'guidePrice');

                    newSentence = {};
                    newSentence.date = [];

                });




            }


            else if (row[0].step === 'guidePrice') {


                toursScheme.updateMany({_id: row[0].stepEditor}, {
                    $set: {
                        guidePrice: msg.text
                    }
                }, {upsert: false}, function (err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('OK');
                    }

                    bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: keyboard.admin,
                            resize_keyboard: true
                        }

                    })
                    helper.switchState(helper.getChatId(msg), 'v98', 'v99');

                    newSentence = {};
                    newSentence.date = [];

                });





            }





            else if (row[0].step === 'dateTour') {



                console.log('newSentence',newSentence);
                console.log('newSentence.date',newSentence.date);
                console.log('TYPEOF',typeof newSentence.date);

                newSentence.date.push(msg.text);



                let arrTourDateMore = [
                    [{
                        text: '–î–∞'
                    }],
                    [{
                        text: '–ù–µ—Ç'
                    }]
                ]

                bot.sendMessage(helper.getChatId(msg), '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–∞—Ç—ã?', {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: arrTourDateMore,
                        resize_keyboard: true
                    }

                })


                helper.switchState(helper.getChatId(msg), 'dateTourMore');

            }

            else if (row[0].step === 'dateTourMore') {


                if (msg.text === '–î–∞') {

                    bot.sendMessage(helper.getChatId(msg), '3Ô∏è‚É£ –î–∞—Ç—É —Ç—É—Ä–∞' +
                        '\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12.02');

                    helper.switchState(helper.getChatId(msg), 'dateTour');


                } else if (msg.text === '–ù–µ—Ç') {

                    toursScheme.updateMany({_id: row[0].stepEditor}, {$push: {sentence: newSentence}}, {upsert: false}, function (err) {
                        if (err) {
                            console.log(err);
                        } else {
                            console.log('OK');
                        }

                        bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                keyboard: keyboard.admin,
                                resize_keyboard: true
                            }

                        })
                        helper.switchState(helper.getChatId(msg), 'v98', 'v99');

                        newSentence = {};
                        newSentence.date = [];

                    });


                    helper.switchState(helper.getChatId(msg), 'v4');

                }



            }


            // –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
            else if (row[0].step === 'add_funds') {
                if (msg.text.replace(/\s/g, '').length === 0 || isNaN(msg.text)) {

                    bot.sendMessage(
                        helper.getChatId(msg), config.HTML_number_check, {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });

                    step = 'add_funds';


                    //(id, step, link, amount, price) —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–∞—Ä—ã–π –∑–ø—Ä–æ—Å–∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ—Å—Ç—É
                    helper.switchState(helper.getChatId(msg), step);
                }
                else {

                    let numTyp = Number(msg.text);
                    let minAdd = 10;

                    if (numTyp < minAdd) {
                        bot.sendMessage(
                            helper.getChatId(msg), config.HTML_min_amount_check + config.HTML_min_add_funds_check, {
                                parse_mode: 'HTML',
                                disable_web_page_preview: true,
                            });

                        step = 'add_funds';


                        //(id, step, link, amount, price) —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–∞—Ä—ã–π –∑–ø—Ä–æ—Å–∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ—Å—Ç—É
                        helper.switchState(helper.getChatId(msg), step);

                    }
                    else {
                        let numFondy = Number(msg.text)*100;
                        let payload = helper.getChatId(msg) + Date.now() + 'pay' + numTyp;	// you can use your own payload
                        let step = 'WAIT';
                        //let callback_url = `http://165.227.154.26/callback`;
                        helper.switchState(helper.getChatId(msg), step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, msg.text, undefined, undefined, undefined, undefined, payload);



                        const merchant_data = JSON.stringify([{
                            chat_id: `${helper.getChatId(msg)}`,
                        }]);

                        let creatSig = `${process.env.Fondy_secretKey}|${numFondy}|RUB|${process.env.Fondy_merchantId}|Mixtripbot|${payload}`;

                        let signature = sha1(creatSig);


                        const requestData = {
                            order_id: payload,
                            order_desc: 'Mixtripbot',
                            currency: 'RUB',
                            amount: numFondy,
                            server_callback_url: `http://165.227.154.26/callback`,
                            signature: signature,
                            response_url: `https://t.me/Mixtripbot`,
                            merchant_data: merchant_data,
                        };


                        const fondy = new CloudIpsp(
                            {
                                merchantId: process.env.Fondy_merchantId,
                                secretKey: process.env.Fondy_secretKey
                            }
                        );

                        fondy.Checkout(requestData).then(data => {


                            let payBut = [
                                [
                                    {
                                        text: '‚úÖ–ü–æ–ø–æ–ª–Ω–∏—Ç—å',
                                        callback_data: 'add_funds',
                                        url: `${data.checkout_url}`
                                    }
                                ],
                                [
                                    {
                                        text: '‚ùå–û—Ç–º–µ–Ω–∞',
                                        callback_data: 'cancel'
                                    }
                                ]
                            ];

                            bot.sendMessage(helper.getChatId(msg), config.HTML_min_add_funds_button + `<strong>${numTyp}</strong>‚ÇΩ  \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å–æ —Å—Å—ã–ª–∫–µüëáüëáüëá`, {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: payBut,
                                    resize_keyboard: true
                                }

                            })
                        }).catch((error) => {
                            console.log(error)
                        });



                    }


                }
            }


            // –¥–ª—è –∞–¥–∏–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏
            else if (msg.text === 'üõíAdmin' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üõíAdmin' && helper.getChatId(msg).toString() === process.env.Dev_ID) {
                allArr = {};

                helper.switchState(helper.getChatId(msg), 'v99');

                helper.resetUserInfo(helper.getChatId(msg), function () {

                    bot.sendMessage(helper.getChatId(msg), "üôå –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã", {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: keyboard.admin,
                            resize_keyboard: true
                        }

                    })
                });

            }
            else if (msg.text === 'üë•How many users' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üë•How many users' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                helper.all_user(function (row) {
                    bot.sendMessage(msg.chat.id, `‚òÅÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${row}`, {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            keyboard: keyboard.admin,
                            resize_keyboard: true
                        }

                    })
                })
            }
            else if (msg.text === 'üìäAll Status' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üìäAll Status' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                bot.sendMessage(helper.getChatId(msg), 'üôå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω! ‚òÅÔ∏è');

                let memory_ub;
                let cpu_ub;


                microstats.on('memory', function (value) {
                    console.log('MEMORY:', value);

                    memory_ub = `
            
            ‚òÅÔ∏è usedpct: ${value.usedpct}
            ‚òÅÔ∏è total: ${value.total}
            ‚òÅÔ∏è free: ${value.free}`;

                });

                microstats.on('cpu', function (value) {
                    console.log('CPU:', value);

                    cpu_ub = `
            
            ‚òÅÔ∏è loadpct: ${value.loadpct}
            ‚òÅÔ∏è userpct: ${value.userpct}
            ‚òÅÔ∏è syspct: ${value.syspct}
            ‚òÅÔ∏è idlepct: ${value.idlepct}`;

                });


                //¬´–æ–¥–∏–Ω —Ä–∞–∑¬ª: –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å–æ–æ–±—â–∏—Ç —Ç–µ–∫—É—â–∏–µ —á–∏—Å–ª–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.
                let options1 = {frequency: 'once'};

                let optionsArray = [options1];
                optionsArray.forEach(function (options) {
                    console.log('---Testing options:', options, '---');
                    microstats.start(options, function (err) {
                        if (err) console.log(err);
                    });

                    setTimeout(function () {

                        bot.sendMessage(
                            msg.chat.id, `
            ‚òÅÔ∏è--- CPU ---
            
            ${cpu_ub}
            
            
‚òÅÔ∏è--- MEMORY ---
            
            ${memory_ub}
            
            `, {
                                reply_markup: {}
                            });

                        microstats.stop();
                    }, 10000);
                });


            }
            else if (msg.text === 'üì£Announcement' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üì£Announcement' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                bot.sendMessage(helper.getChatId(msg), 'üôå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚òÅÔ∏è');

                helper.switchState(helper.getChatId(msg), 'Announcement');


            }
            else if (row[0].step === 'Announcement') {

                let Announcement = msg.text;

                helper.announcement(function (row) {

                    for (let i = 0; i < row.length; i++) {

                        bot.sendMessage(row[i].id, Announcement, {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                        });
                    }
                    helper.switchState(helper.getChatId(msg), 'admin');


                });


            }
            else if (msg.text === 'üì¢Announcement Preview' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üì¢Announcement Preview' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                bot.sendMessage(helper.getChatId(msg), 'üôå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞‚òÅÔ∏è');

                helper.switchState(helper.getChatId(msg), 'Announcement_preview');


            }
            else if (msg.text === 'üì¢–†–µ—Ñ–µ—Ä–∞–ª—ã' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üì¢–†–µ—Ñ–µ—Ä–∞–ª—ã' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                bot.sendMessage(helper.getChatId(msg), 'üôå –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É ‚òÅÔ∏è');

                helper.switchState(helper.getChatId(msg), 'refarr');


            }
            else if (msg.text === 'üì¢–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É' && helper.getChatId(msg).toString() === process.env.Admin_ID || msg.text === 'üì¢–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É' && helper.getChatId(msg).toString() === process.env.Dev_ID) {

                bot.sendMessage(helper.getChatId(msg), 'üôå –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É ‚òÅÔ∏è');

                helper.switchState(helper.getChatId(msg), 'refarrCle');


            }
            else if (row[0].step === 'refarr') {


                helper.refArr(msg.text, function (row) {


                   // let texti = [];

                    async function processArray() {

                        if (row.length === 0) {
                            bot.sendMessage(msg.chat.id, `–ï—â–µ –Ω–µ –ø—Ä–∏–≤–µ–ª –¥—Ä—É–∑–µ–π üôÅ`
                                , {
                                    parse_mode: 'HTML',
                                    disable_web_page_preview: true,
                                    reply_markup: {
                                        resize_keyboard: true
                                    }

                                });
                        }
                        else {

                            function delay() {
                                return new Promise(resolve => setTimeout(resolve, 1000));
                            }

                            async function delayedLog(item) {
                                // –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –¥–ª—è Promise
                                // –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ delay
                                for (const items of item) {

                                    if (items.typeTour) {
                                        bot.sendMessage(
                                            msg.chat.id, `
<code>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—É—Ä</code>

<strong>–°—Ç—Ä–∞–Ω–∞</strong>: ${items.direction}
<strong>–¢—É—Ä</strong>: ${items.nameTour}
<strong>–¢–∏–ø —Ç—É—Ä–∞</strong>: ${items.typeTour}
<strong>–î–∞—Ç–∞</strong>: ${items.date}
<strong>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</strong>: ${items.preOrder} —Ä—É–±



                                    `, {
                                                parse_mode: 'HTML',
                                            });
                                        await delay();

                                    }
                                    else {
                                        bot.sendMessage(
                                            msg.chat.id, `
<code>–ü—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω –≥–∞–π–¥</code>

<strong>–°—Ç—Ä–∞–Ω–∞</strong>: ${items.direction},
<strong>–¶–µ–Ω–∞</strong>: ${items.guidePrice} —Ä—É–±.,


                                    `, {
                                                parse_mode: 'HTML',
                                            });
                                        await delay();

                                    }


                                }




                            }

                            async function processArray(array) {
                                let aC = 0;
                                let bC = 0;

                                for (const item of array) {

                                    if (item.userOrder_t.length === 0) {
                                        aC = 1;
                                    }
                                    else {
                                        bC = 1;
                                        await delayedLog(item.userOrder_t);
                                    }


                                }
                                console.log('Done!');

                                if (aC === 1 && bC === 0 ) {
                                    bot.sendMessage(
                                        msg.chat.id, `
–ü—Ä–∏–≤–µ–ª: <code>${row.length}</code>`, {
                                            parse_mode: 'HTML',
                                        });
                                }
                                else if (aC === 1 && bC === 1) {
                                    bot.sendMessage(
                                        msg.chat.id, `
<code>Done!</code>`, {
                                            parse_mode: 'HTML',
                                        });
                                }
                                else if (aC === 0 && bC === 1) {
                                    bot.sendMessage(
                                        msg.chat.id, `
<code>Done!</code>`, {
                                            parse_mode: 'HTML',
                                        });
                                }


                            }

                            processArray(row);

                        }

                    }
                    processArray();

                    step = 'clientRefs_';
                    previous_step = '–ü—Ä–æ—Ñ–∏–ª—å_';
                    helper.switchState(msg.chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);


                });
            }

            else if (row[0].step === 'refarrCle') {

                console.log('111',msg.text);
                userScheme.updateMany({ref: msg.text}, {
                    $set: {
                        userOrder_t: []
                    }
                }, {upsert: false}, function (err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('OK');
                        bot.sendMessage(
                            msg.chat.id, `
<code>–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏</code>




                                    `, {
                                parse_mode: 'HTML',
                            });
                        helper.switchState(helper.getChatId(msg), 'v82');

                    }
                });


            }
            else if (row[0].step === 'Announcement_preview') {

                bot.sendMessage(process.env.Admin_ID, `${msg.text}`, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });
                bot.sendMessage(process.env.Dev_ID, `${msg.text}`, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });

                helper.switchState(helper.getChatId(msg), 'admin');

            }
        }

    }, msg.text, msg.from.first_name);


});

bot.on("contact",msg =>{


    helper.userCheck(msg.chat.id, function (row) {

        helper.arrTour(row[0].id, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, msg.contact.phone_number,function () {

        })

        if (row[0].typeTour === 'Package') {

            bot.sendMessage(msg.chat.id, `–°–ø–∞—Å–∏–±–æ ${msg.contact.first_name}! ‚ùóÔ∏è–í–∞—à–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: \n${row[0].presentation}`, {
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: keyboard.homepage,
                    resize_keyboard: true
                }

            }).then(setTimeout(() => {
                bot.sendMessage(msg.chat.id, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                    reply_markup: {
                        inline_keyboard: kb.homepage
                    }
                })
            }, 700))
            bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ü–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: ${msg.contact.first_name},
–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞: <code><strong>${msg.contact.phone_number}</strong></code>,

                       
–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
    –ö–æ–ª-–≤–æ –ª—é–¥–µ–π: ${row[0].people}
    –î–µ—Ç–∏: ${row[0].children}
    –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –¥–Ω–µ–π: ${row[0].days}
    
                       
                        
                        `,{
                parse_mode: 'HTML',
                disable_web_page_preview: true,
            });
            bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ü–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: ${msg.contact.first_name},
–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞: <code><strong>${msg.contact.phone_number}</strong></code>,

                       
–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
    –ö–æ–ª-–≤–æ –ª—é–¥–µ–π: ${row[0].people}
    –î–µ—Ç–∏: ${row[0].children}
    –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –¥–Ω–µ–π: ${row[0].days}
    
                       
                        
                        `,{
                parse_mode: 'HTML',
                disable_web_page_preview: true,
            });

            helper.switchState(msg.chat.id, 'v100');

        }
        else if (row[0].typeTour === 'Authors') {

            //helper.interestedTourTmp(msg.chat.id, row[0].userSelectedTour[0]);
            //helper.selectedTourClear(msg.chat.id, msg.contact.phone_number)

            bot.sendMessage(msg.chat.id, `–°–ø–∞—Å–∏–±–æ ${msg.contact.first_name}! ‚ùóÔ∏è–í–∞—à–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: \n${row[0].presentation}`, {
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: keyboard.homepage,
                    resize_keyboard: true
                }

            }).then(setTimeout(() => {
                bot.sendMessage(msg.chat.id, `–í—ã –º–æ–∂–µ—Ç–µ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É`, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä',
                                callback_data: 'book_a_tour'
                            }],
                            [{
                                text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É',
                                url: "https://t.me/mixtripsupport"
                            }],
                            [{
                                text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                            }]
                        ],
                        resize_keyboard: true
                    }

                })
            }, 700))
            bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ü–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: ${msg.contact.first_name},
–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞: <code><strong>${msg.contact.phone_number}</strong></code>,

                       
–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
                       
                        
                        `,{
                parse_mode: 'HTML',
                disable_web_page_preview: true,
            });
            bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ü–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: ${msg.contact.first_name},
–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞: <code><strong>${msg.contact.phone_number}</strong></code>,

                       
–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
                       
                        
                        `,{
                parse_mode: 'HTML',
                disable_web_page_preview: true,
            });

            helper.switchState(msg.chat.id, 'v100');
        }



    });


})

bot.on('callback_query', msg => {

    const {chat, message_id, text} = msg.message;

    let step;
    let previous_step;

    if (msg.data === 'pay_guide') {

        helper.userCheck(chat.id, function (row) {

            helper.template_general(chat.id,message_id,[],'üí°Ô∏è –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞. \nüî≠–í–∞—à –≥–∞–π–¥: \n'+ `<i>${row[0].guide}</i>`  , function (text, opts) {
                bot.editMessageText(text, opts).then(setTimeout(() => {
                    bot.sendMessage(chat.id, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                        reply_markup: {
                            inline_keyboard: kb.homepage
                        }
                    })
                }, 700));

            });


            console.log('pay');



            console.log('balance -> ', row[0].balance);
            console.log('sum -> ', row[0].guidePrice);

            let new_balance = (row[0].balance - row[0].guidePrice).toFixed(2);
            console.log('new_balance', new_balance);
            //–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ–∏—é
            helper.balance_man(chat.id, new_balance, function (rowz) {
                console.log('balance_man row', rowz);

                //TODO: –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ —Ä–µ—Ñ, –µ—Å–ª–∏ –Ω–µ—Ç—É —Ä–µ—Ñ–∞ —Ç–æ–≥–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –¥–æ–ø –º–∞—Å—Å–∏–≤ userOrder_t


                console.log(row[0].ref, 'REFFF');
                if (row[0].ref) {
                    let orderidarr = [];

                    orderidarr.push({
                        'direction': row[0].direction,
                        'guide': row[0].guide,
                        'guidePrice': row[0].guidePrice,

                    });
                    userScheme.updateMany({id: chat.id }, { $push: { userOrder: orderidarr, userOrder_t:orderidarr}}, function (err) {
                        console.log('err', err)
                    });

                }
                else {
                    let orderidarr = [];

                    orderidarr.push({
                        'direction': row[0].direction,
                        'guide': row[0].guide,
                        'guidePrice': row[0].guidePrice,

                    });
                    userScheme.updateMany({id: chat.id }, { $push: { userOrder: orderidarr}}, function (err) {
                        console.log('err', err)
                    });

                }

                bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–ù–æ–º–µ—Ä: <code><strong>${row[0].phone}</strong></code>,

                       
–ö—É–ø–∏–ª –≥–∞–π–¥: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¶–µ–Ω–∞ –≥–∞–π–¥–∞: ${row[0].guidePrice}—Ä—É–±
  
                   

                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });
                bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–ù–æ–º–µ—Ä: <code><strong>${row[0].phone}</strong></code>,

                       
–ö—É–ø–∏–ª –≥–∞–π–¥: 
    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¶–µ–Ω–∞ –≥–∞–π–¥–∞: ${row[0].guidePrice}—Ä—É–±
    
                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });


            });


        });

        helper.resetUserInfo(chat.id, function (row) {
        });

    }
    if (msg.data === 'pay') {
        helper.template_general(chat.id,message_id,undefined,'‚òÅÔ∏è –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞ !', function (text, opts) {
            bot.editMessageText(text, opts).then(setTimeout(() => {
                bot.sendMessage(chat.id, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                    reply_markup: {
                        inline_keyboard: kb.homepage
                    }
                })
            }, 700));

        });

        helper.userCheck(chat.id, function (rows) {

            let new_balance = (rows[0].balance - rows[0].price).toFixed(2);
            //–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ–∏—é
            helper.balance_man(chat.id, new_balance, function () {

                let orderidarr = [];

                orderidarr.push({
                    'direction': rows[0].direction,
                    'preOrder': rows[0].price,
                    'nameTour': rows[0].nameTour,
                    'typeTour': rows[0].typeTour,
                    'presentation': rows[0].presentation,
                    'date': rows[0].date,
                });
                if (rows[0].ref) {
                    userScheme.updateMany({id: chat.id }, { $push: { userSelectedTour: orderidarr, userOrder_t:orderidarr}}, function (err) {
                        console.log('err', err)
                    });
                }
                else {
                    userScheme.updateMany({id: chat.id }, { $push: { userSelectedTour: orderidarr}}, function (err) {
                        console.log('err', err)
                    });
                }
                bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${rows[0].name},
–ù–æ–º–µ—Ä: <code><strong>${rows[0].phone}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –¢—É—Ä: 
    –°—Ç—Ä–∞–Ω–∞: ${rows[0].direction}
    –¢—É—Ä: ${rows[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${rows[0].typeTour}
    –î–∞—Ç–∞: ${rows[0].date}

                   
    –í–Ω–µ—Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É:${rows[0].price}—Ä—É–±

                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });
                bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${rows[0].name},
–ù–æ–º–µ—Ä: <code><strong>${rows[0].phone}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –¢—É—Ä: 
    –°—Ç—Ä–∞–Ω–∞: ${rows[0].direction}
    –¢—É—Ä: ${rows[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${rows[0].typeTour}
    –î–∞—Ç–∞: ${rows[0].date}
   
    
    –í–Ω–µ—Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É:${rows[0].price}—Ä—É–±
    
                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });







            });
        });

    }
    else if (msg.data === 'CreateRef') {

        helper.template_general(chat.id,message_id,kb.create_ref,`‚òÅÔ∏è<code> <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∞!\n</b></code>
‚òÅÔ∏è <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ä–∞—Å–∫—Ä—É—Ç–∫—É –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –ª–∏–±–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫, –≤—ã–≤–æ–¥ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 72 —á–∞—Å–æ–≤üòâ</b>`, function (text, opts) {
            bot.editMessageText(text, opts);

        });

        step = 'CreateRef';
        previous_step = '–ü—Ä–æ—Ñ–∏–ª—å_';
        helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

    }
    else if (msg.data === 'clientRefs') {

        helper.refArr(chat.id, function (row) {


            //let texti = [];

            async function processArray() {

                if (row.length === 0) {
                    helper.template_general(chat.id,message_id,kb.back,`–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤–µ–ª–∏ –¥—Ä—É–∑–µ–π üôÅ`, function (text, opts) {
                        bot.editMessageText(text, opts);

                    });
                } else {

                    function delay() {
                        return new Promise(resolve => setTimeout(resolve, 1000));
                    }

                    async function delayedLog(item) {
                        // –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –¥–ª—è Promise
                        // –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ delay
                        for (const items of item) {

                            if (items.typeTour) {
                                bot.sendMessage(
                                    chat.id, `
<code>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—É—Ä</code>

<strong>–°—Ç—Ä–∞–Ω–∞</strong>: ${items.direction}
<strong>–¢—É—Ä</strong>: ${items.nameTour}
<strong>–¢–∏–ø —Ç—É—Ä–∞</strong>: ${items.typeTour}
<strong>–î–∞—Ç–∞</strong>: ${items.date}
<strong>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</strong>: ${items.preOrder} —Ä—É–±



                                    `, {
                                        parse_mode: 'HTML',
                                    });
                                await delay();

                            }
                            else {
                                bot.sendMessage(
                                    chat.id, `
<code>–ü—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω –≥–∞–π–¥</code>

<strong>–°—Ç—Ä–∞–Ω–∞</strong>: ${items.direction},
<strong>–¶–µ–Ω–∞</strong>: ${items.guidePrice} —Ä—É–±.,


                                    `, {
                                        parse_mode: 'HTML',
                                    });
                                await delay();

                            }


                        }




                    }

                    async function processArray(array) {
                        let aC = 0;
                        let bC = 0;

                        for (const item of array) {

                            if (item.userOrder_t.length === 0) {
                                aC = 1;
                            }
                            else {
                                bC = 1;
                                await delayedLog(item.userOrder_t);
                            }


                        }
                        console.log('Done!');

                        if (aC === 1 && bC === 0 ) {
                            bot.sendMessage(
                                chat.id, `
–í—ã –ø—Ä–∏–≤–µ–ª–∏: <code>${row.length}</code>`, {
                                    parse_mode: 'HTML',
                                });
                        }
                        else if (aC === 1 && bC === 1) {
                            bot.sendMessage(
                                chat.id, `
<code>Done!</code>`, {
                                    parse_mode: 'HTML',
                                });
                        }
                        else if (aC === 0 && bC === 1) {
                            bot.sendMessage(
                                chat.id, `
<code>Done!</code>`, {
                                    parse_mode: 'HTML',
                                });
                        }


                    }

                    processArray(row);

                }

            }
            processArray();

            step = 'clientRefs_';
            previous_step = '–ü—Ä–æ—Ñ–∏–ª—å_';
            helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);


        });
    }
    else if (msg.data === 'takeRef') {

        let linkRef = `https://t.me/Mixtripbot?start=${chat.id}`;

        helper.template_general(chat.id,message_id,kb.back,`‚òÅÔ∏è –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n ${linkRef} `, function (text, opts) {
            bot.editMessageText(text, opts);

        });

        bot.sendMessage(process.env.Admin_ID, `<code>‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
–°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
üë§ <i>${linkRef}</i>
                </code>`,{
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });
        bot.sendMessage(process.env.Dev_ID, `<code>‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
–°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
üë§ <i>${linkRef}</i>
                </code>`,{
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });

        step = 'takeRef';
        previous_step = 'CreateRef_';
        helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

    }
    else if (msg.data === 'back') {
        helper.userCheck(chat.id, function (row) {

            if (row[0].previous_step === '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {

                helper.template_general(chat.id, message_id, kb.homepage, `‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:`, function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                helper.resetUserInfo(chat.id, function (row) {
                });

            }

            if (row[0].previous_step === 'tours') {


                helper.loadButton(function (row) {
                    let newRow = row;

                    newRow.push([{
                        text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                        callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                    }]);

                    helper.template_general(chat.id, message_id, newRow, config.tours_description, function (text, opts) {
                        bot.editMessageText(text, opts);

                    });

                    step = 'tours';
                    previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                    helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);



                });

            }

            if (row[0].previous_step === 'selectedCountry') {


                toursScheme.find({btnName: row[0].stepEditor}, function (err, rows) {


                    if (err) {
                        console.log(err)
                    }

                    else {


                        if (rows[0].typeTour === 'Authors') {

                        }

                        else if (rows[0].typeTour === 'Package') {

                        }

                        let kbForCountry = [
                            [{
                                text: '‚Ü©Ô∏è–ù–∞–∑–∞–¥',
                                callback_data: 'back'
                            }]
                        ];


                        for (let i = 0; i < rows[0].sentence.length; i++) {



                            kbForCountry.unshift(
                                [{
                                    text: rows[0].sentence[i].name,
                                    callback_data: rows[0].sentence[i].name,
                                }]
                            );

                        }

                        helper.template_general(chat.id,message_id, kbForCountry,'‚òÅÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
                            bot.editMessageText(text, opts);

                        });

                        helper.switchState(chat.id, 'selectedCountry', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'tours');


                    }


                });

            }

            if (row[0].previous_step === '–ü—Ä–æ—Ñ–∏–ª—å_') {


                userScheme.find({id: msg.from.id}, function (err, rows) {
                    if (err) {
                        console.log(err)
                    } else {

                        helper.template_general(chat.id,message_id,kb.profile,`<b>üí∞–ë–∞–ª–∞–Ω—Å - ${rows[0].balance} —Ä—É–±.\n</b>` +
                            `<b>–í–∞—à ID - ${chat.id}</b>`, function (text, opts) {
                            bot.editMessageText(text, opts);

                        });


                    }
                });


                helper.resetUserInfo(chat.id, function (row) {
                });

            }

            if (row[0].previous_step === 'Faq_') {


                helper.template_general(chat.id, message_id, kb.help, '‚ÅâÔ∏èÔ∏è–ü–æ–º–æ—â—å:', function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                helper.resetUserInfo(chat.id, function (row) {
                });

            }

            if (row[0].previous_step === 'CreateRef_') {


                helper.template_general(chat.id,message_id,kb.create_ref,`‚òÅÔ∏è<code> <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∞!\n</b></code>
‚òÅÔ∏è <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ä–∞—Å–∫—Ä—É—Ç–∫—É –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –ª–∏–±–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫, –≤—ã–≤–æ–¥ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 72 —á–∞—Å–æ–≤üòâ</b>`, function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                helper.resetUserInfo(chat.id, function (row) {
                });

            }

            if (row[0].previous_step === '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤_') {


                helper.userCheck(msg.from.id, function (row) {


                    if (row[0].userOrder.length === 0) {

                        /**
                        const opts = {
                            chat_id: chat.id,
                            message_id: message_id,
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: JSON.stringify({
                                inline_keyboard: kb.back

                            })

                        };
                        **/
                        helper.template_general(chat.id, message_id, kb.taskbutton, `<b>‚òÅÔ∏è–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n</b>`, function (text, opts) {
                            bot.editMessageText(text, opts);

                        });
                    }
                    else {

                        //TODO: –≤—ã–≤–æ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è


                    }

                    step = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤_';
                    previous_step = '–ü—Ä–æ—Ñ–∏–ª—å_';
                    helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);
                });


                helper.resetUserInfo(chat.id, function (row) {
                });

            }



        })

    }
    else if (msg.data === 'cancel') {
        helper.resetUserInfo(chat.id, function (row) {
        });

        helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
            bot.editMessageText(text, opts);

        });


    }
    else if (msg.data === '–ø—Ä–æ—Ñ–∏–ª—å') {
        userScheme.find({id: msg.from.id}, function (err, rows) {
            if (err) {
                console.log(err)
            } else {

                helper.template_general(chat.id,message_id,kb.profile,`<b>üí∞–ë–∞–ª–∞–Ω—Å - ${rows[0].balance} —Ä—É–±.\n</b>` +
                    `<b>–í–∞—à ID - ${chat.id}</b>`, function (text, opts) {
                    bot.editMessageText(text, opts);

                });


            }
        });

        step = '–ü—Ä–æ—Ñ–∏–ª—å_';
        previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
        helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);


    }
    else if (msg.data === 'book_a_tour') {


        helper.userCheck(chat.id, function (row) {


            //TODO: –ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ


            if (row[0].balance >= row[0].price) {

                helper.template_general(chat.id,message_id,kb.pay,`
<strong>–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ: \n${row[0].price} —Ä—É–±.</strong>

    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}

–ö –æ–ø–ª–∞—Ç–µ: <code>${row[0].price} —Ä—É–±.</code>

–ë–∞–ª–∞–Ω—Å: <code>${row[0].balance} —Ä—É–±.</code>

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:‚¨áÔ∏è`, function (text, opts) {
                    bot.editMessageText(text, opts);

                });



            }
            else {

                //–†–ê–ó–î–ï–û–ò–¢–¨ –ü–ê–ö–ï–¢–ù–´–ô –ò –ê–í–¢–û–†–°–ö–ò–ô
                if (row[0].typeTour === 'Authors') {

                    helper.template_general(chat.id,message_id,kb.add_funds,`
<strong>–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ: \n${row[0].price} —Ä—É–±.</strong>

    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}

–ö –æ–ø–ª–∞—Ç–µ: <code>${row[0].price} —Ä—É–±.</code>

–ë–∞–ª–∞–Ω—Å: <code>${row[0].balance} —Ä—É–±.</code>
            
            –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:‚¨áÔ∏è`, function (text, opts) {
                        bot.editMessageText(text, opts);

                    });

                }
                else if (row[0].typeTour === 'Package') {
                    helper.template_general(chat.id,message_id,kb.add_funds,`

<strong>–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ: \n${row[0].price} —Ä—É–±.</strong>

    –°—Ç—Ä–∞–Ω–∞: ${row[0].direction}
    –¢—É—Ä: ${row[0].nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${row[0].typeTour}
    –î–∞—Ç–∞: ${row[0].date}
    –ö–æ–ª-–≤–æ –ª—é–¥–µ–π: ${row[0].people}
    –î–µ—Ç–∏: ${row[0].children}
    –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –¥–Ω–µ–π: ${row[0].days}

–ö –æ–ø–ª–∞—Ç–µ: <code>${row[0].price} —Ä—É–±.</code>

–ë–∞–ª–∞–Ω—Å: <code>${row[0].balance} —Ä—É–±.</code>
            
–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:‚¨áÔ∏è`, function (text, opts) {
                        bot.editMessageText(text, opts);

                    });
                }


            }
        })




    }
    else if (msg.data === 'book_a_event') {


        helper.userCheck(chat.id, function (row) {
            if (row[0].social) {

                bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${row[0].social}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: 
        ${text}

                       
                        
                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });
                bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${row[0].social}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: 
        ${text}
                       
                        
                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });


            }
            else {
                helper.template_general(chat.id, message_id, undefined, '–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç—å—é. \n–ù–∞–ø—Ä–∏–º–µ—Ä: instagram, facebook, vkontakte ', function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                userScheme.updateMany({id: chat.id}, {
                    $set: {
                        step: 'shareSocial',
                        task: text,
                    }
                }, {upsert: false}, function (err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('OK');
                    }
                });
            }
        })





    }
    else if (msg.data === 'book_a_businessCamp') {


        helper.userCheck(chat.id, function (row) {
            if (row[0].social) {

                bot.sendMessage(process.env.Admin_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${row[0].social}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª Business Camp: 
        ${text}

                       
                        
                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });
                bot.sendMessage(process.env.Dev_ID, `‚òÅÔ∏è –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                 
–ò–º—è: ${row[0].name},
–°–æ—Ü. —Å–µ—Ç—å: <code><strong>${row[0].social}</strong></code>,

                       
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª Business Camp: 
        ${text}
                       
                        
                        `,{
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                });


            }
            else {
                helper.template_general(chat.id, message_id, undefined, '–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç—å—é. \n–ù–∞–ø—Ä–∏–º–µ—Ä: instagram, facebook, vkontakte ', function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                userScheme.updateMany({id: chat.id}, {
                    $set: {
                        step: 'shareSocialB',
                        task: text,
                    }
                }, {upsert: false}, function (err) {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log('OK');
                    }
                });
            }
        })





    }
    else if (msg.data === 'faq') {

        helper.template_general(chat.id, message_id, kb.help, '‚ÅâÔ∏èÔ∏è–ü–æ–º–æ—â—å:', function (text, opts) {
            bot.editMessageText(text, opts);

        });

        step = 'faq';
        previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
        helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);



    }
    else if (msg.data === 'events') {

        //TODO: –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –µ—Å–ª–∏ –Ω–µ—Ç—É

        eventScheme.find({}, function (err, rows) {
            if (err) {
                console.log(err)
            }

            else {


                if (rows.length === 0) {
                    helper.template_general(chat.id, message_id, kb.back, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç!', function (text, opts) {
                        bot.editMessageText(text, opts);

                    });

                    step = 'viewsAllEvents';
                    previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                    helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);


                }
                else if (rows.length === 1) {
                    eventScheme.find({}, function (err, rows) {


                        for (let i = 0; i < rows.length; i++) {
/////
                            helper.template_general(chat.id, message_id, [
                                [{
                                    text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                                    callback_data: 'book_a_event'
                                }],
                                [{
                                    text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É',
                                    url: "https://t.me/mixtripsupport"
                                }],
                                [{
                                    text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                    callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                                }]
                            ], rows[i].info, function (text, opts) {
                                bot.editMessageText(text, opts);

                            });


                        }

                    });



                }
                else {
                    eventScheme.find({}, function (err, rows) {



                        for (let i = 0; i < rows.length; i++) {

                            bot.sendMessage(chat.id, rows[i].info, {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                                            callback_data: 'book_a_event'
                                        }],
                                        [{
                                            text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É',
                                            url: "https://t.me/mixtripsupport"
                                        }],
                                        [{
                                            text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                            callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                                        }]
                                    ],
                                    resize_keyboard: true
                                }

                            })

                        }

                    });



                }

            }


        });



    }
    else if (msg.data === 'Business_Camp') {
        businessCampScheme.find({}, function (err, rows) {
            if (err) {
                console.log(err)
            }

            else {


                if (rows.length === 0) {
                    helper.template_general(chat.id, message_id, kb.back, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç Business Camp –Ω–µ—Ç!', function (text, opts) {
                        bot.editMessageText(text, opts);

                    });

                    step = 'viewsAllbusinessCamp';
                    previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                    helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);


                }
                else if (rows.length === 1) {
                    businessCampScheme.find({}, function (err, rows) {


                        for (let i = 0; i < rows.length; i++) {
/////
                            helper.template_general(chat.id, message_id, [
                                [{
                                    text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å Business Camp',
                                    callback_data: 'book_a_businessCamp'
                                }],
                                [{
                                    text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É',
                                    url: "https://t.me/mixtripsupport"
                                }],
                                [{
                                    text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                    callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                                }]
                            ], rows[i].info, function (text, opts) {
                                bot.editMessageText(text, opts);

                            });


                        }

                    });



                }
                else {
                    businessCampScheme.find({}, function (err, rows) {


                        for (let i = 0; i < rows.length; i++) {

                            bot.sendMessage(chat.id, rows[i].info, {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                                            callback_data: 'book_a_businessCamp'
                                        }],
                                        [{
                                            text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É',
                                            url: "https://t.me/mixtripsupport"
                                        }],
                                        [{
                                            text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                            callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                                        }]
                                    ],
                                    resize_keyboard: true
                                }

                            })

                        }

                    });



                }

            }


        });


    }
    else if (msg.data === 'Instructions') {

        let text = 'https://telegra.ph/Mix-Trip-04-20';
        const opts = {
            chat_id: chat.id,
            message_id: message_id,
            parse_mode: 'HTML',
            reply_markup: JSON.stringify({
                inline_keyboard: kb.back

            })

        };


        bot.editMessageText(text, opts);

        step = 'Instructions';
        previous_step = 'Faq_';
        helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);




    }
    else if (msg.data === 'myGuideF') {

        helper.userCheck(chat.id, function (rows) {


            if (rows[0].userOrder.length !== 0) {
                function delay() {
                    return new Promise(resolve => setTimeout(resolve, 1000));
                }

                async function delayedLog(item) {
                    // –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –¥–ª—è Promise
                    // –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ delay

                    bot.sendMessage(
                        chat.id, `
<code>–ü—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–Ω—ã–µ –≥–∞–π–¥—ã</code>

<strong>–°—Ç—Ä–∞–Ω–∞</strong>: ${item.direction},
<strong>–¶–µ–Ω–∞</strong>: ${item.guidePrice} —Ä—É–±.,
<strong>–ì–∞–π–¥</strong>: ${item.guide},


                                    `, {
                            parse_mode: 'HTML',
                        });
                    await delay();

                }

                async function processArray(array) {
                    for (const item of array) {
                        await delayedLog(item);

                    }
                    console.log('Done!');
                    bot.sendMessage(
                        chat.id, `
<code>–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –≥–∞–π–¥—ã!</code>`, {
                            parse_mode: 'HTML',
                        });
                }

                processArray(rows[0].userOrder);
            }
            else {
                let text = '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ –≥–∞–π–¥—ã';
                const opts = {
                    chat_id: chat.id,
                    message_id: message_id,
                    parse_mode: 'HTML',
                    reply_markup: JSON.stringify({
                        inline_keyboard: kb.back

                    })

                };
                bot.editMessageText(text, opts);

                step = 'myGuideF_hist';
                previous_step = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤_';
                helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

            }
        })





    }
    else if (msg.data === 'myPreOrdTour') {

        helper.userCheck(chat.id, function (rows) {

            if (rows[0].userSelectedTour.length !== 0) {


                function delay() {
                    return new Promise(resolve => setTimeout(resolve, 1000));
                }

                async function delayedLog(item) {
                    // –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –¥–ª—è Promise
                    // –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ delay

                    bot.sendMessage(
                        chat.id, `
<code>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—É—Ä</code>

–°—Ç—Ä–∞–Ω–∞: ${item.direction}
    –¢—É—Ä: ${item.nameTour}
    –¢–∏–ø —Ç—É—Ä–∞: ${item.typeTour}
    –î–∞—Ç–∞: ${item.date}
<strong>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</strong>: ${item.preOrder} —Ä—É–±

                                    `, {
                            parse_mode: 'HTML',
                        });
                    await delay();

                }

                async function processArray(array) {
                    for (const item of array) {
                        await delayedLog(item);

                    }
                    console.log('Done!');
                    bot.sendMessage(
                        chat.id, `
<code>–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã!</code>`, {
                            parse_mode: 'HTML',
                        });
                }

                processArray(rows[0].userSelectedTour);
            }
            else {
                let text = '–í—ã –µ—â–µ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç—É—Ä—ã';
                const opts = {
                    chat_id: chat.id,
                    message_id: message_id,
                    parse_mode: 'HTML',
                    reply_markup: JSON.stringify({
                        inline_keyboard: kb.back

                    })

                };
                bot.editMessageText(text, opts);

                step = 'myPreOrdTour_hist';
                previous_step = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤_';
                helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

            }
        })

    }
    else if (msg.data === 'finishTask') {
        helper.userCheck(msg.from.id, function (row) {


            if (row[0].userOrder_t.length === 0) {

                const opts = {
                    chat_id: chat.id,
                    message_id: message_id,
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: JSON.stringify({
                        inline_keyboard: kb.back

                    })

                };


                bot.editMessageText(`–ù–∞ –¥–∞–Ω–Ω—ã –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç—É`, opts);

            }
            else {

                async function finishTasksArr(cb) {
                    let arrHistOrd = [];
                    //let texti = [];

                    for (let i = 0; i < row[0].userOrder_t.length; i++) {


                        await arrHistOrd.push(row[0].userOrder_t[i]);
                    }
                    cb(arrHistOrd);
                    //callback(texti);
                }

                finishTasksArr(function (row) {


                    let array = row;
                    let size = 10; //—Ä–∞–∑–º–µ—Ä –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
                    let subarray = []; //–º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                    for (let i = 0; i <Math.ceil(array.length/size); i++){
                        subarray[i] = array.slice((i*size), (i*size) + size);
                    }


                    //let textis = [];

                    let rowLen = JSON.stringify(subarray)



                    if (rowLen.length > 4096) {

                        let finishTaskArrparsArr = async function (arr, cb) {

                            for (let i = 0; i < arr.length; i++) {
                                await cb(arr[i]);

                            }


                        }

                        finishTaskArrparsArr(subarray, function (arrTex) {

                            async function procLongMessfinishTaskArr(arrTex,cb) {
                                let texti = [];

                                for (let i = 0; i < arrTex.length; i++) {

                                    await  texti.push(`
–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${arrTex[i].id},
–ü—Ä–æ–≥—Ä–µ—Å: ${arrTex[i].progress},
–î–∞—Ç–∞: ${arrTex[i].date},
–°–æ—Ü.—Å–µ—Ç—å: ${arrTex[i].web},
–ó–∞–¥–∞—á–∞: ${arrTex[i].name},
–°—Å—ã–ª–∫–∞: ${arrTex[i].url},
–ó–∞–∫–∞–∑–∞–Ω–æ: ${arrTex[i].amount},
–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${arrTex[i].current}
                                    `);
                                }
                                cb(texti);
                            }
                            procLongMessfinishTaskArr(arrTex,function (row) {

                                bot.sendMessage(
                                    chat.id, `${row}`, {
                                        parse_mode: 'HTML',disable_web_page_preview: true,
                                    });

                            });




                        })


                    }
                    else {

                        let parsfinishTaskArrArrz = async function (arr, cb) {

                            for (let i = 0; i < arr.length; i++) {
                                await cb(arr[i]);

                            }


                        }

                        parsfinishTaskArrArrz(subarray, function (arrTex) {


                            async function procfinishTaskArrLongMessz(arrTex,cb) {
                                let texti = [];
                                //let arrHistOrd = [];


                                for (let i = 0; i < arrTex.length; i++) {
                                    await texti.push(`
–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${arrTex[i].id},
–ü—Ä–æ–≥—Ä–µ—Å: ${arrTex[i].progress},
–î–∞—Ç–∞: ${arrTex[i].date},
–°–æ—Ü.—Å–µ—Ç—å: ${arrTex[i].web},
–ó–∞–¥–∞—á–∞: ${arrTex[i].name},
–°—Å—ã–ª–∫–∞: ${arrTex[i].url},
–ó–∞–∫–∞–∑–∞–Ω–æ: ${arrTex[i].amount},
–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${arrTex[i].current}
                                    `)


                                }
                                cb(texti);

                            }
                            procfinishTaskArrLongMessz(arrTex,function (row) {

                                helper.template_general(chat.id, message_id, kb.back, `<b>‚òÅÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n</b>`+`${row}`, function (text, opts) {
                                    bot.editMessageText(text, opts);

                                });

                            });
                        })
                    }

                });

            }

            step = 'finishTask_';
            previous_step = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤_';
            helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);
        });



    }
    else if (msg.data === '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤') {

        helper.userCheck(msg.from.id, function () {


            helper.template_general(chat.id, message_id, kb.taskbutton, `<b>‚òÅÔ∏è–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n</b>`, function (text, opts) {
                bot.editMessageText(text, opts);

            });


            step = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤_';
            previous_step = '–ü—Ä–æ—Ñ–∏–ª—å_';
            helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);
        });

    }
    else if (msg.data === '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è') {

        helper.userCheck(msg.from.id, function (rows) {


            if (rows[0].addFunds_t.length === 0) {
                helper.template_general(chat.id, message_id, kb.back, `–í—ã –µ—â–µ –Ω–µ –ø–æ–ø–æ–ª–Ω—è–ª–∏ —Å—á–µ—Ç`, function (text, opts) {
                    bot.editMessageText(text, opts);

                });

            }
            else {

                async function processArrayq(cb) {
                    let texti = [];

                    for (let i = 0; i < rows[0].addFunds_t.length; i++) {

                        texti.push(`
‚òÅÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É: ${rows[0].addFunds_t[i].sum}—Ä—É–±

                `);
                    }
                    cb(texti);
                }
                processArrayq(function (row) {



                    let array = row;
                    let size = 50; //—Ä–∞–∑–º–µ—Ä –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
                    let subarray = []; //–º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                    for (let i = 0; i <Math.ceil(array.length/size); i++){
                        subarray[i] = array.slice((i*size), (i*size) + size);
                    }
                    let rowLen = JSON.stringify(subarray)


                    if (rowLen.length < 3800) {

                        console.log('–º–µ–Ω—å—à–µ');


                        helper.template_general(chat.id, message_id, kb.back, `${row}`, function (text, opts) {
                            bot.editMessageText(text, opts);

                        });
                    } else {


                        let finishFoundsArrparsArr = async function (arr, cb) {

                            for (let i = 0; i < arr.length; i++) {
                                await cb(arr[i]);

                            }


                        }

                        finishFoundsArrparsArr(subarray, function (arrTex) {
                            console.log('arrTex',arrTex);

                            bot.sendMessage(
                                chat.id, `${arrTex}`, {
                                    parse_mode: 'HTML',disable_web_page_preview: true,
                                    reply_markup: {
                                        inline_keyboard: kb.back
                                    }
                                });





                        })

                    }



                });
            }

            step = '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è_';
            previous_step = '–ü—Ä–æ—Ñ–∏–ª—å_';
            helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

        });

    }
    else if (msg.data === '–ù–∞ –≥–ª–∞–≤–Ω—É—é') {

        helper.resetUserInfo(chat.id, function (row) {

        });

        helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
            bot.editMessageText(text, opts);

        });

        // helper.interestedTourTmpClear(chat.id)

    }
    else if (msg.data === 'tours') {

        helper.loadButton(function (row) {

            let newRow = row;

            newRow.push([{
                text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
            }]);

            helper.template_general(chat.id, message_id, newRow, config.tours_description, function (text, opts) {
                bot.editMessageText(text, opts);

            });

            step = 'tours';
            previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
            helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);



        });


    }
    else if (msg.data === 'add_funds') {

        helper.template_general(chat.id, message_id, undefined, config.HTML_add_funds, function (text, opts) {
            bot.editMessageText(text, opts);

        });

        //(id, step, link, amount, price, sum, text, example_text, min, max, task, request_type, service_id)
        helper.switchState(chat.id, 'add_funds');

    }
    else if (msg.data === 'buy_guide') {

        helper.userCheck(chat.id, function (row) {

            //TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –±–∞–ª–∞–Ω—Å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ª–∏–±–æ –∫–Ω–æ–ø–∫–∏ –æ–±–ª–∞—Ç—ã –ª–∏–±–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å

            let viewGuide = [
                [{
                    text: '‚úÖ–û–ø–ª–∞—Ç–∏—Ç—å',
                    callback_data: 'pay_guide'
                }],
                [{
                    text: '‚ùå–û—Ç–º–µ–Ω–∞',
                    callback_data: 'cancel'
                }]
            ];



            if (row[0].balance >= row[0].guidePrice) {



                helper.template_general(chat.id, message_id, viewGuide, `–¶–µ–Ω–∞ –≥–∞–π–¥–∞:  <code><strong>${row[0].guidePrice} —Ä—É–±</strong></code> \n\n`+ `${row[0].guideInfo} \n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${row[0].balance}—Ä—É–±.`, function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

            }
            else {

                helper.template_general(chat.id, message_id, kb.add_funds, `–¶–µ–Ω–∞ –≥–∞–π–¥–∞:  <code><strong>${row[0].guidePrice} —Ä—É–±</strong></code> \n\n`+ `${row[0].guideInfo}`+ ` \n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${row[0].balance}—Ä—É–±. \n\n–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å. `, function (text, opts) {
                    bot.editMessageText(text, opts);

                });

                step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                previous_step = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
                helper.switchState(chat.id, step, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, previous_step);

            }


        })



    }
    else {

        helper.userCheck(chat.id, function (row) {


            if (row[0].step === 'tours') {

                toursScheme.find({btnName: msg.data}, function (err, rows) {


                    if (err) {
                        console.log(err)
                    }

                    else {


                        if (rows === null) {


                            helper.resetUserInfo(chat.id, function (row) {

                            });

                            helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
                                bot.editMessageText(text, opts);

                            });
                            helper.switchState(chat.id, 'v2');

                        }
                        else {


                            if (rows.length !== 0) {
                                userScheme.updateMany({id: row[0].id}, {
                                    $set: {
                                        direction: rows[0].name
                                    }
                                }, {upsert: false}, function (err) {
                                    if (err) {
                                        console.log(err);
                                    } else {
                                        //let neName = rows[0].name || '1';

                                        //–µ—Å—Ç—å –≥–∞–π–¥
                                        if (rows[0].guide) {

                                            let kbForCountry = [
                                                [{
                                                    text: 'üí∞ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≥–∞–π–¥',
                                                    callback_data: 'buy_guide',
                                                }],
                                                [{
                                                    text: '‚Ü©Ô∏è–ù–∞–∑–∞–¥',
                                                    callback_data: 'back'
                                                }]
                                            ];


                                            for (let i = 0; i < rows[0].sentence.length; i++) {

                                                kbForCountry.unshift(
                                                    [{
                                                        text: rows[0].sentence[i].name,
                                                        callback_data: rows[0].sentence[i].name,
                                                    }]
                                                );

                                            }

                                            helper.template_general(chat.id,message_id, kbForCountry,rows[0].infoTours || '‚òÅÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ!', function (text, opts) {
                                                bot.editMessageText(text, opts);

                                            });

                                            helper.switchState(chat.id, 'selectedCountry', msg.data, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'tours');

                                            helper.addGuide(chat.id, rows[0].guide, rows[0].guideInfo, rows[0].guidePrice)

                                        }
                                        //–Ω–µ—Ç—É –≥–∞–π–¥–∞
                                        else {

                                            let kbForCountry = [
                                                [{
                                                    text: '‚Ü©Ô∏è–ù–∞–∑–∞–¥',
                                                    callback_data: 'back'
                                                }]
                                            ];

                                            for (let i = 0; i < rows[0].sentence.length; i++) {

                                                kbForCountry.unshift(
                                                    [{
                                                        text: rows[0].sentence[i].name,
                                                        callback_data: rows[0].sentence[i].name,
                                                    }]
                                                );

                                            }

                                            helper.template_general(chat.id,message_id, kbForCountry, rows[0].infoTours || '‚òÅÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ!', function (text, opts) {
                                                bot.editMessageText(text, opts);

                                            });

                                            helper.switchState(chat.id, 'selectedCountry', msg.data, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'tours');

                                        }
                                    }
                                })




                            }
                            //TODO: —Ç—É—Ç –µ—â–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                            else {

                                helper.resetUserInfo(chat.id, function (row) {

                                });

                                helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
                                    bot.editMessageText(text, opts);

                                });
                                helper.switchState(chat.id, 'v22');



                            }
                        }




                    }


                });


            }

            else if (row[0].step === 'selectedCountry') {

                console.log('–≤—Ç–æ—Ä–æ–π —Ä–µ–¥–∞–∫—Ç');

                helper.sentenseCheck(msg.data , function (list) {
                    if (list === null) {


                        helper.resetUserInfo(chat.id, function (row) {

                        });

                        helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
                            bot.editMessageText(text, opts);

                        });
                        helper.switchState(chat.id, 'v2', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'v34');


                    }
                    else {

                        helper.arrTour(row[0].id, undefined, list.sentence[0].name, list.sentence[0].typeTour, list.sentence[0].sentence, undefined, undefined, undefined, undefined, undefined,function () {




                            let kbForCountrys = [
                                [{
                                    text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                    callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                                }]
                            ];

                            if (list.sentence[0].typeTour === 'Authors') {


                                for (let i = 0; i < list.sentence[0].date.length; i++) {

                                    kbForCountrys.unshift(
                                        [{
                                            text: list.sentence[0].date[i],
                                            callback_data: list.sentence[0].date[i],
                                        }]
                                    );

                                }


                                helper.template_general(chat.id,message_id, kbForCountrys,list.sentence[0].typeTourInfo ||'‚òÅÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º –¥–∞—Ç—É ‚§µÔ∏è', function (text, opts) {
                                    bot.editMessageText(text, opts);


                                });
                                helper.switchState(chat.id, 'viewsPresentation', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'selectedCountry');


                            }

                            else if (list.sentence[0].typeTour === 'Package') {

                                helper.template_general(chat.id,message_id, undefined,'1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ' +
                                    '\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12.03', function (text, opts) {
                                    bot.editMessageText(text, opts);

                                    helper.switchState(chat.id, 'enterInfoTour', msg.data, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'tours');

                                });

                            }
                        }, list.sentence[0].preOrder);

                    }

                })




            }
            else if (row[0].step === 'viewsPresentation') {
                //bot.deleteMessage(chat.id, message_id);

                helper.arrTour(row[0].id, undefined, undefined, undefined, undefined, msg.data, undefined, undefined, undefined, undefined,function () {

                    if (row[0].phone === null) {
                        let options = {
                            "parse_mode": "Markdown",
                            "reply_markup": JSON.stringify({
                                "keyboard": [
                                    [{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact: true }]
                                ],
                                "one_time_keyboard" : true
                            })
                        };
                        bot.sendMessage(chat.id, "‚ùóÔ∏èÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", options);



                    }
                    else {

                        bot.sendMessage(chat.id, `‚ùóÔ∏è–í–∞—à–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: \n${row[0].presentation}`, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                keyboard: keyboard.homepage,
                                resize_keyboard: true
                            }

                        }).then(setTimeout(() => {
                            bot.sendMessage(chat.id, `–í—ã –º–æ–∂–µ—Ç–µ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É`, {
                                parse_mode: 'HTML',
                                disable_web_page_preview: true,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä',
                                            callback_data: 'book_a_tour'
                                        }],
                                        [{
                                            text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É',
                                            url: "https://t.me/mixtripsupport"
                                        }],
                                        [{
                                            text: '‚Ü©Ô∏è–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                            callback_data: '–ù–∞ –≥–ª–∞–≤–Ω—É—é'
                                        }]
                                    ],
                                    resize_keyboard: true
                                }

                            })
                        }, 700))


                    }

                })

            }


            else if (row[0].step === 'v1') {


                helper.resetUserInfo(chat.id, function (row) {
                });

                helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
                    bot.editMessageText(text, opts);

                });



            }
            else if (row[0].step === 'v2') {

                helper.resetUserInfo(chat.id, function (row) {
                    console.log(row);
                });

                helper.template_general(chat.id, message_id, kb.homepage, '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', function (text, opts) {
                    bot.editMessageText(text, opts);

                });



            }



        })


    }






});

bot.on('inline_query', msg => {
    const {chat, message_id, text} = msg.message;
    let result = {
        name: 1
    };

    bot.answerInlineQuery(chat.id, result, {});


});

bot.onText(/start/i, (msg, [source, match]) => {

    //bot.deleteMessage(msg.from.id, msg.message_id);
    allArr = {};


    if (msg.from.id.toString() === process.env.Admin_ID || msg.from.id.toString() === process.env.Dev_ID) {
        bot.sendMessage(msg.chat.id, "Hello Admin üôå", {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                keyboard: keyboard.admin,
                resize_keyboard: true
            }

        }).then(setTimeout(() => {
            bot.sendMessage(helper.getChatId(msg), '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                reply_markup: {
                    inline_keyboard: kb.homepage
                }
            })
        }, 700))
            .catch((error) => {
                console.error(error)
            });
    } else {
        bot.sendMessage(helper.getChatId(msg), config.HTML_main, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                keyboard: keyboard.homepage,
                resize_keyboard: true
            }
        })
            .then(setTimeout(() => {
                bot.sendMessage(helper.getChatId(msg), '‚òÅÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:', {
                    reply_markup: {
                        inline_keyboard: kb.homepage
                    }
                })
            }, 700))
            .catch((error) => {
                console.error(error)
            });

    }


});




module.exports = app;

